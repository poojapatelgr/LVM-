from django.shortcuts import render, redirect, reverse
from django.conf import settings
from django.contrib.auth.views import redirect_to_login
from django.http import HttpResponse, HttpResponseRedirect
from django.db import models
from django.contrib.auth.decorators import login_required
from django.db.models import Count, Q, Sum
from django.contrib import messages
from django.contrib import admin
from datetime import datetime, date, timedelta
from dateutil.parser import parse
from dateutil import relativedelta
from formtools.preview import FormPreview
from .forms import LeaveForm, TokenForm
from .models import Holidays, LeavesPerYear
from .models import Profile, records, Region
import json, copy
import csv
import pandas as pd
import numpy as np
import tempfile
import os 
from django.http import FileResponse
from openpyxl import load_workbook
from .forms import ExportCSVForm, EmpHistoryForm
from operator import and_
from django.views.decorators.cache import never_cache
from django.utils.decorators import method_decorator
from django.views.generic import View
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm


def process_preview(rec, context):
    profile = Profile.objects.get(user=rec.user)
    holidays = Holidays.objects.all().filter(region=profile.region)
    lpy = LeavesPerYear.objects.all().first()
    computed_dates = calc_leavedates(rec, holidays)
    maxborrow = 0
    
        
    context['leave_dates'] = computed_dates
    context['user'] = profile
    peryear = LeavesPerYear.objects.all().first()
    remaining_days = context['leaves_details']['rpl']
    remainingsl_days = context['leaves_details']['rsl']

    reason = rec.reason
    lpd = rec.get_leave_period_display()
    if rec.reason == 'MARRY': remaining_days = peryear.ma
    if rec.reason == 'PATER': remaining_days = peryear.pt
    if rec.reason == 'MATER': remaining_days = peryear.mt
   

    if reason == 'PERFD' or reason == 'PERHD' or reason == 'SICFD' or reason == 'SICHD' or reason =='LOPFD':
        for i, v in enumerate(context['leave_dates']):

            if (i+1 <= remaining_days and rec.reason == 'PERFD') or (remaining_days >= 0.5 and rec.reason == 'PERHD'):
                v.append(rec.get_reason_display())
                v.append(rec.reason)
                
            elif (i+1 <= remainingsl_days and rec.reason == 'SICFD') or (remainingsl_days >= 0.5 and rec.reason == 'SICHD'): 
                v.append(rec.get_reason_display())
                v.append(rec.reason)
                
            else:
                rec.reason = 'LOPFD'
                v.append(rec.get_reason_display())
                v.append(rec.reason)

            if 'HD' in reason:
                v[1] = f'{v[1]}({lpd})'
           
    if reason == 'MATER' or reason == 'PATER' or reason == 'MARRY':      
        for i, v in enumerate(context['leave_dates']):
            rec.reason = reason 
            v.append(rec.get_reason_display())
            v.append(rec.reason)


def SaveRecord(form, context):
    rec = form.save(commit=False)
    if 'HD' in rec.reason:
        num_days = 0.5
    else:
        num_days = 1.0

    approver_id = Profile.objects.get(user=rec.user).approver_id

    rname = Profile.objects.get(user=rec.user).employee_name

    for a, b, d, x, r in context['leave_dates']:
        if 'HD' in r:
            leaveperiod = rec.get_leave_period_display()
        else:
            leaveperiod = 'First Half'

        records.objects.create(
            user=rec.user,
            recname=rname,
            reason=r,
            leave_period=leaveperiod,
            approver_id=approver_id,
            num_days=num_days,
            from_date=d,
            year=d.year)


def earnedleave(datefr, dateto, lperm):

    d = relativedelta.relativedelta(dateto, datefr)
    if d.days < 15:
        t = d.months * lperm
    else:
        t = d.months * lperm + 0.5

    return t

 
def calc_leavedates(rec, holidays):
   
    lvdates = []

    peryear = LeavesPerYear.objects.all().first()
    num_days = rec.num_days
    if 'HD' in rec.reason:
        num_days = 1
    if rec.reason == 'MARRY': num_days = peryear.ma
    if rec.reason == 'PATER': num_days = peryear.pt
    if rec.reason == 'MATER': num_days = peryear.mt
    
    holidaylst = [x.date.strftime('%d-%m-%Y') for x in holidays]

    lvdate = datetime.combine(rec.from_date, datetime.min.time())

    if rec.reason in ['PERFD', 'PERHD', 'SICFD',
                      'SICHD', 'PATER', 'MARRY', 'LOPHD', 'LOPFD']:
        while True:
        
            if lvdate.isoweekday() == 7 or lvdate.strftime('%d-%m-%Y') in holidaylst:
                pass
            else:
                lvdates.append([lvdate.strftime('%d-%m-%Y'), lvdate.strftime("%A"), lvdate.date()])

            lvdate += timedelta(days=1)

            if len(lvdates) == num_days: break
    else:
        lvdates.append([lvdate.strftime('%d-%m-%Y'), lvdate.strftime("%A"), lvdate.date()])
       
    return lvdates


@login_required
def employee_history(request,username):
    context = {}
    erecords = records.objects.filter(user = username)
    context['emp_name']= Profile.objects.get(user=username).employee_name
    context['emp_user']= Profile.objects.get(user=username)
    context['emp_records'] = erecords
    return render(request, 'leaveman/employees.html', context)


def fetch_details(username):
    cyear = datetime.now().year
    leaves = records.objects.all().filter(user=username).order_by('-from_date')
    leaves_count = records.objects.filter(
        user=username, year=cyear).aggregate(
            personal_leaves=Sum('num_days', filter=(Q(reason='PERFD') | Q(reason='PERHD'))),
            sick_leaves=Sum('num_days', filter=(Q(reason='SICFD') | Q(reason='SICHD'))),
            maternity_leaves=Sum('num_days', filter=Q(reason='MATER')),
            paternity_leaves=Sum('num_days', filter=Q(reason='PATER')),
            marriage_leaves=Sum('num_days', filter=Q(reason='MARRY')),
            lop_leaves=Sum('num_days', filter=(Q(reason='LOPFD') | Q(reason='LOPHD'))),
        )

    for k, v in leaves_count.items():
        if v is None:
            leaves_count[k] = 0
    
    profile = Profile.objects.get(user=username)
    lmstdate = profile.lm_start_date
    rollover = profile.rollover
    lpy = LeavesPerYear.objects.all().first()
    lpydata = lpy_data(profile)
    
    rpl = (rollover + earnedleave(lmstdate, datetime.now(), lpydata['epm']) -
           leaves_count['personal_leaves'] + lpydata['mpb'])
    
    rsl = (earnedleave(lmstdate, datetime.now(), lpydata['esm']) -
           leaves_count['sick_leaves'] + lpydata['msb'])

    leaves_count['rpl'] = rpl
    leaves_count['rsl'] = rsl
    return leaves, leaves_count

def lpy_data(profile):
    
    lpy = LeavesPerYear.objects.all().first()

    if profile.role:
        return {
            'mpb': lpy.mplcb,
            'msb': lpy.mpscb,
            'epm': lpy.eplm,
            'esm': lpy.eslm
        }
    else:
        return {
            'mpb': lpy.mpleb,
            'msb': lpy.mpseb,
            'epm': lpy.eplm,
            'esm': lpy.eslm
        }



def get_initial(request):
    print(f'Username: {request}')
    profile = Profile.objects.get(user=request.user)
    
    return {'gender': profile.Gender, 'num_days': 1,
            'user': request.user, 'role': profile.role,}

def get_reason_choices(choices, gender, role, remainingpl, ml):
    if gender == 'M' or role:
        print(f'Gender: {gender} role: {role}')
        choices = [x for x in choices if x[1] != 'Maternity']

    if gender == 'F':
        choices = [x for x in choices if x[1] != 'Paternity']

    if remainingpl > 0:
            choices = [x for x in choices if x[0] != 'LOPFD']
            choices = [x for x in choices if x[0] != 'LOPHD']
    if ml:
        choices = [x for x in choices if x[0] != 'MARRY']

    return choices

@login_required
def applyleave(request):
    post = None

    template_name = 'leaveman/apply.html'

    user = request.user

    leaves, leavedetails = fetch_details(user)
    initial = get_initial(request)
    initial['rempl'] = leavedetails['rpl']
    initial['remsl'] = leavedetails['rsl']
    initial['ml'] = leavedetails['marriage_leaves']
    
    ltaken = copy.deepcopy(leavedetails)
    remaining = {'rpl': ltaken.pop('rpl'), 'rsl': ltaken.pop('rsl')}
    for i in ['maternity_leaves','paternity_leaves', 'marriage_leaves']:
        ltaken.pop(i)

    context = {
      'username': user,
      'rpl':remaining['rpl'],
      'rsl':remaining['rsl'],
      'tpl':ltaken.pop('personal_leaves'),
      'tsl':ltaken.pop('sick_leaves'),
      'tlop':ltaken.pop('lop_leaves'),
      'leaves_details': leavedetails,
      'leaves': leaves,
      'leavestaken': ltaken,
      'remaining': remaining,
      'approver' : False,
      'ml' :leavedetails['marriage_leaves'],
    }

    if request.user.is_authenticated:
        username = request.user
        user_profile = Profile.objects.get(user=username)
        if user_profile.approver == True:
            context['approver'] = True;
            appr_report_list = [[x.user.username, x.user.id, x.employee_name ] for x in Profile.objects.filter(approver_id = username.username)]
            context['employees'] = appr_report_list

    if request.method == 'POST' and '_csubmit' not in request.POST:
        form = LeaveForm(request.POST)
        form.fields['reason'].choices = get_reason_choices(
            form.fields['reason'].choices, initial['gender'],
            initial['role'],context['rpl'], context['ml']
        )

        if form.is_valid():
            rec = form.save(commit=False)
            context['post'] = rec
            process_preview(rec, context)
            
            if '_preview' in request.POST:
                if 'HD' in rec.reason:
                    rec.num_days = 0.5
                print('rec.resonnnnn:',rec.reason)
                context['reason'] = rec.get_reason_display()
                template_name = 'leaveman/preview.html'

            elif '_save' in request.POST:
                SaveRecord(form, context)
                return HttpResponseRedirect('/leaveman/new/')
    
    elif request.method == 'POST' and  '_csubmit' in request.POST:
        form = LeaveForm(initial=initial)
        to_be_approved = request.POST.getlist('approved')
        for request_id in to_be_approved:
            status = records.objects.get(id=request_id).cancelled
            if status == False:
                records.objects.filter(id=request_id).update(approved=False,cancelled=True)
    
    else:
        form = LeaveForm(initial=initial)
        
    context['form'] = form
    ##### org leaves    
    if request.user.is_authenticated:
        username = request.user
        context['username'] = request.user
        todayrecords = records.objects.filter(from_date = date.today()).order_by('user')
        context['todayrecords'] = todayrecords
    return render(request, template_name, context)
    
##################################################

def approve_list(username):
    approved=records.objects.filter(approver_id=username,approved=True).order_by('-from_date')
    approved_not=records.objects.filter(approver_id=username,approved=False).order_by('-from_date')
    return approved,approved_not


@login_required
def index(request):
    context = {}
    if request.user.is_authenticated:
        username = request.user
        context['username'] = request.user
        user_profile = Profile.objects.get(user=username)
        if user_profile.approver == True:
            context['approver'] = True;
            appr_report_list = [[x.user.username, x.user.id, x.employee_name ] for x in Profile.objects.filter(approver_id = username.username)]
            context['employees'] = appr_report_list
            aprl,naprl = approve_list(username)
            context['naprls'] = naprl
            context['aprls'] = aprl
            if '_submit' in request.POST:
                to_be_approved = request.POST.getlist('approved')
                for request_id in to_be_approved:
                    status = records.objects.get(id=request_id).cancelled
                    if status == False:
                        records.objects.filter(id=request_id).update(approved=True)
                    else:
                        records.objects.filter(id=request_id).delete()
                messages.info(request,'Thanks for approving the leave requests.')
                return render(request,'leaveman/approver.html',context)
            return render(request,'leaveman/approver.html',context)
        else:
            return redirect('leaveman:new')

@login_required
def approved_history(request):
    context = {}
    username = request.user
    context['username'] = request.user
    user_profile = Profile.objects.get(user=username)
    if user_profile.approver == True:
        aprl,naprl = approve_list(username)
        context['aprls'] = aprl
        return render(request,'leaveman/approved_history.html',context)


@login_required
def DeleteLeave(request,pk):
    context = {}
    context['username'] = request.user
    drecord = records.objects.get(id=pk)
    if request.method == "POST":
        drecord = records.objects.filter(id=pk).update(approved=False,cancelled=True)
        if drecord:
            messages.info(request,'Requesting for leave cancellation')
            return redirect('leaveman:new')
        else:
            messages.info(request,'No leave')
            return redirect('leaveman:new')
    return render (request,'leaveman/delete.html',context)


@login_required
def isapprover(request):
    if request.user.is_authenticated:
        username = request.user
        user_profile = Profile.objects.get(user=username)
        if user_profile.approver == True:
            return redirect('leaveman:index')
        elif request.user.is_staff:
            return render (request,'leaveman/accountbase.html')
        else:
            return redirect('leaveman:new')
    else:
        return HttpResponseRedirect('/login/')

################################################

def writexlsx(df, xltemplate, oxlsx="output.xlsx"):
    '''
    write an excel workbook by filling the template from
    a DataFrame.
    '''
    wb = load_workbook(xltemplate)
    ws = wb['Attendance']
    for r,row in enumerate(df.values.tolist()):
        for c,col in enumerate(row):
            x = ws.cell(row=r+1+3, column=c+1)
            x.value=col
    wb.save(oxlsx)

def export_filter(request):
    form = ExportCSVForm()
    if request.method == 'POST':
        data = None
        form = ExportCSVForm(request.POST)
        if form.is_valid():
            df = exportCSV(form)
            if form.cleaned_data['role'] == "True":
                frole = 'Consultants'
            else:
                frole = 'Employees'
            filename = f'{frole}-{date.today()}'
            with tempfile.TemporaryDirectory() as tmpdir:
                filepath = f'{tmpdir}/{filename}.xlsx'
                csvfile = df.to_csv(f'{tmpdir}/foo.csv')
                df = pd.read_csv(f'{tmpdir}/foo.csv', dtype={"user_id": str})
                df.fillna("P", inplace=True)
                writexlsx(df,'/home/sikshana/sw/dj/leaveman/Novtemplate.xlsx',oxlsx=filepath)
                with open(filepath, "rb") as excel:
                    data = excel.read()
                response = HttpResponse(data,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
                response['Content-Disposition'] = f'attachment; filename={filename}.xlsx'
                return response

    return render(request, 'leaveman/accountbase.html', {'form': form})


def pgroups(v, **kwargs):
    dlist = []
    dates = list(v[['from_date','reason']].values)
    for f,r in dates:
        dlist.append([r,list(pd.date_range(start=f, end=f).astype(str))])
    row = pd.Series(index=kwargs['columns'])
    

    row['user_id'] = v.name
    for r,d in dlist:
        for e in d:
            row[e] = r
    return row.fillna('P')

def createDummyDF(users,dates):
    ddf = pd.DataFrame(np.ones((len(users),len(dates))), columns=dates)
    dfu = pd.DataFrame(users,columns=['user_id'])
    fdf = pd.concat([dfu,ddf],axis=1)
    fdf = fdf.astype(str).replace('1.0','P')
    return fdf

def exportCSV(form):
    cchoices = {
        'PERFD' : "PL",
        'PERHD' : "1/2P+1/2PL",
        'SICFD' : "SL",
        'SICHD' : "1/2P+1/2SL",
        'MATER' : "MTL",
        'PATER' : "PL",
        'LOPFD' : "LOP",
        'LOPHD' : "1/2P+1/2LOP",
        'MARRY' : "ML",
    }
    echoices = {
        'PERFD' : "PL.",
        'PERHD' : "1/2P+1/2PL.",
        'SICFD' : "SL",
        'SICHD' : "1/2P+1/2SL",
        'MATER' : "MTL",
        'PATER' : "PL",
        'LOPFD' : "LOP",
        'LOPHD' : "1/2P+1/2LOP",
        'MARRY' : "ML",
    }
    frole = form.cleaned_data['role']
    rlist = Profile.objects.filter(role = frole)
    allusers = [z.user.username for z in rlist]
    print('ALLLLLL',allusers)
    ftdata = records.objects.filter(Q(from_date__gte = form.cleaned_data['from_date']) & Q(from_date__lte = form.cleaned_data['to_date']) & Q(user__in = allusers)).values()
    df = pd.DataFrame(ftdata)
    dates = list(pd.date_range(start=form.cleaned_data['from_date'], end=form.cleaned_data['to_date']).astype(str))
        
    if df.empty:
        fdf = createDummyDF(allusers,dates)
    else:
        lusers = df.user_id.unique().tolist()
        users = [u for u in allusers if u not in lusers]
        print('ALUSERS:',allusers,lusers,users)
        ddf = createDummyDF(users,dates)
        bdf = df[['user_id','from_date','num_days','reason']]
        cols = ['user_id'] + dates
        fdf=df.groupby(['user_id']).apply(pgroups, columns=cols).reset_index(drop=True)
        fdf = pd.concat([fdf, ddf], axis = 0)
    if frole == 'True':
        choices = cchoices
    else:
        choices = echoices
    
    matrecords = records.objects.filter(reason='MATER')
    rdates = pd.date_range(start=form.cleaned_data['from_date'], end=form.cleaned_data['to_date'])
    for mrec in matrecords:
        matdays = LeavesPerYear.objects.all().first().mt
        name = mrec.user.username
        fromdate = mrec.from_date
        matdates = pd.date_range(fromdate, fromdate + timedelta(days=matdays-1))
        common = set(matdates).intersection(set(rdates))
        if common:
            dlist= [x.strftime('%Y-%m-%d') for x in common]
            for d in dlist:
                print(d)
                fdf.loc[fdf['user_id'] == name, d] = 'MTL'
    fdf = fdf.astype(str).replace(choices)
    fdf.insert(1,"month",datetime.today().strftime('%b/%Y'),True)
    fdf.insert(1,"Employee Name",fdf.user_id.apply(lambda x: Profile.objects.filter(user = x).first().employee_name), True)
    return fdf

###########################################


def login_request(request):
    if request.method == 'POST':
        form = AuthenticationForm(request=request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('leaveman:start')
    form = AuthenticationForm()
    return render(request = request,
                    template_name = "leaveman/login.html",
                    context={"form":form})
    
def logout_request(request):
    logout(request)
    return HttpResponseRedirect("/")

#####################################

def holidays(request):
    hdict = {}
    context = {}
    userrid=Profile.objects.filter(user=request.user).first().region.id
    genrid=Region.objects.filter(name='General Holidays').first().id 
    rids = [genrid, userrid]
    allids = [x.id for x in Region.objects.all()]
    for x in allids:
        if x in rids:
            pass 
        else:
            rids.append(x)
   
    for regionid in rids:
        holidays = Holidays.objects.filter(region__id=regionid).order_by('date')
        regdata = [[x.date, x.name] for x in holidays]
        regname=Region.objects.get(id=regionid).name
        hdict[regname] = regdata
    context['holidays'] = hdict
    
    if request.user.is_authenticated:
        username = request.user
        user_profile = Profile.objects.get(user=username)
        if user_profile.approver == True:
            context['approver'] = True;
            appr_report_list = [[x.user.username, x.user.id, x.employee_name] for x in Profile.objects.filter(approver_id = username.username)]
            context['employees'] = appr_report_list

    return render (request,'leaveman/holidays.html',context)

#################################################################
@login_required
def EmpHistory(request):
    context={}
    form = EmpHistoryForm()
    if request.method == 'POST':
        form = EmpHistoryForm(request.POST)
        if form.is_valid():
            leaves = records.objects.all().filter(Q(user=form.cleaned_data['employee_number']) & Q(year=form.cleaned_data['year'])).order_by('-from_date')
            context['emp_records'] = leaves
            context['emp_user'] = form.cleaned_data['employee_number']
            return render(request,'leaveman/ls_history.html',context)
        else:
            return render(request, 'leaveman/ls_historyform.html', {'form': form})
    else:
        return render(request, 'leaveman/ls_historyform.html', {'form': form})


def help(request):
    context = {}
    if request.user.is_authenticated:
        username = request.user
        user_profile = Profile.objects.get(user=username)
        if user_profile.approver == True:
            context['approver'] = True;
            appr_report_list = [[x.user.username, x.user.id, x.employee_name] for x in Profile.objects.filter(approver_id = username.username)]
            context['employees'] = appr_report_list
    lp = LeavesPerYear.objects.all().first()
    context['lp'] = lp
    return render(request,'leaveman/help.html',context)

def olt(request):
    context = {}
    if request.user.is_authenticated:
        username = request.user
        user_profile = Profile.objects.get(user=username)
        if user_profile.approver == True:
            context['approver'] = True;
            appr_report_list = [[x.user.username, x.user.id, x.employee_name] for x in Profile.objects.filter(approver_id = username.username)]
            context['employees'] = appr_report_list
        context['username'] = request.user
        todayrecords = records.objects.filter(from_date = date.today()).order_by('user')
        context['todayrecords'] = todayrecords
    return render(request,'leaveman/olt.html',context)

#######################################

def tokenlogin(request):
    if request.method == 'POST':
        token = request.POST['token']
        profile=get_object_or_404(Profile,token=token)
        request.user=User.objects.get(username=profile.user)
        return HttpResponseRedirect('/leaves')
    else:
        form=TokenForm()
        return render(request,'leaveman/help.html',{'form':form})

